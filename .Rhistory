quit()
library("swirl")
ls()
rm(lists=ls())
rm(list=ls())
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
?head
head(plants, n = 10L)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(0:1, 100, replacement = TRUE, prob = c(0.3, 0.7))
sample(0:1, 100, replace = TRUE, prob = c(0.3, 0.7))
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = .7)
rbinom(1, size = 1, prob = .7)
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5)
rpois(5, lampda = 10)
rpois(5, lamda = 10)
rpois(5, 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
quit()
d <- data.frame()
dim(d)
colnames(d)
f <- list.files("~/Coursera/rprog-030/specdata/", full.names = TRUE)
f
f
length(f)
?lapply
?rbind
for(f in files){print(f)}
for(x in f){print(x)}
for(x in f){print(x)[1]}
library(datasets)
data("iris")
?iris
head(iris)
head(iris$Sepal.Length)
seplen <- iris$Sepal.Length
seplen
tapply(iris, iris$Species, mean)
tapply(iris, levels(iris$Species), mean)
vir <- iris[iris$Species == 'virginica']
vir <- iris[iris$Species == 'virginica', ]
vir
mean(vir$Sepal.Length)
rowMeans(iris[, 1:4])
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data("mtcars")
?mtcars
head(mtcars)
split(mtcars, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mpgs <- sapply(split(mtcars$mpg, mtcars$cyl), mean)
mpgs
?abs
abs(-4)
mpgs[1]
abs(mpgs[1] - mpgs[3])
debug(ls)
ls()
set.seed(1)
rpois(5,2)
?dnorm
dnorm(5,0,1)
dnorm(5,0,1)
dnorm(5,0,1)
dnorm(5)
?pois
?rpois
?qpois
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x, y)
x
e
y
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
outcomes <- read.csv("~/Workspace/coursera/rprog-030/rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",  colClasses = "character")
valid_outcomes <- c("heart attack" = 3, "heart failure" = 4, "pneumonia" = 5)
outcome <- "heart attack"
is.element(outcome, names(valid_outcomes))
by_state <- split(outcomes[, c(2, 7, 11, 17, 23)], outcomes[, 7])
state <- "AK"
dat <- na.omit(by_state[[state]][outcome])
by_state[[state]][outcome]
by_state[["AK"]][1]
by_state[["AK"]][valid_outcomes[outcome]]
?split
outcomes <- read.csv("~/Workspace/coursera/rprog-030/rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",  colClasses = "character")
state <- "AK"
outcome <- "heart attack"
valid_outcomes <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
rate <- valid_outcomes[outcome]
outcomes[state]
outcomes[, state]
dat <- subset(outcomes, outcomes[, 7] == state)
dat
rate
outcomes[, rate] <- as.numeric(outcomes[, rate])
subset <- subset(outcomes, outcomes[, 7] == state & !is.na(outcomes[, rate]), c(2, 7, rate))
subset
rank(subset)
rank(subset[, 3])
subset
?rank
rank(subset[, 3], ties.method = subset[, 1])
?order
order(subset[, 2])
order(subset[, 1])
order <- order(subset[, 1])
subset <- subset[order]
subset <- subset[,order]
subset <- subset[order,]
subset <- subset[order,]
subset
order
order <- order(subset[, 1])
subs <- subset[order, ]
subs
mat <- data.frame()
names(mat)
?order
x <- c(7,3,5,7,1,9,4)
y <- c('a','b','d','e','f','g','i')
order(x)
order(x,y)
x <- c(1,1,3:1,1:4,3)
x
y <- c(9,9:1)
y
ii <- order(x,y)
ii
order(x,y)
order(y,x)
order(x,y)
x
y
order(x,y)
z<- c(9,8,7,6,5,4,3,2,1)
order(z)
z <- order(z)
z
z <- z[order(z)]
z
z <- x[sort(x,y)]
z <- x[order(x,y)]
x
z
x
y
z
x <- c(1,1,3:1,1:4,3)
y <- c(9,9:1)
z <- x[order(x,y)]
x
y
z
order(x,y)
a <- c(3,1,5,2,9,6,8,7)
order(a)
a
x
y
z
x
y
z
order(x,y)
x <- c(4,1,7,3,4,1,9)
y <- c('a','b','c','d','e','f','g')
z <- x[order(x,y)]
x
y
z
order(x,y)
y <- reverse(y)
y <- c('g','f','e','d','c','b','a')
z <- x[order(x,y)]
x
y
z
order(x,y)
outcomes <- read.csv("~/Workspace/coursera/rprog-030/rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",  colClasses = "character")
outcome <- "heart attack"
valid_outcomes <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
rate <- valid_outcomes[outcome]
outcomes <- outcomes[, c(2, 7, rate)]
outcomes[, 3] <- as.numeric(outcomes[, 3])
by_state <- split(outcomes, outcomes[, 2])
head(by_state)
x <- lapply(by_state, function(x) x[order(x[, 3], x[, 1])])
x <- lapply(by_state, function(x) x[order(x[3,], x[1,])])
head(x)
x$AK
?order
order(x[,3])
order(by_state[[1]])
by_state[1]
order(by_state[[1]][3])
by_state[1]
order(by_state[[1]][3])
order(by_state[[1]][3], na.rm = TRUE)
order(by_state[[1]][3], na.fail())
?as.numeric
x <- c(1,2,'c',4)
x
as.numeric(x)
x
y <- as.numeric(x)
y
y <- as.numeric(x, na.rm = TRUE)
y
y <- na.omit(as.numeric(x))
y
y
y
y <- as.numeric(x)
y
na.omit(y)
na.omit(y)[1]
na.omit(y)[2]
na.omit(y)
class(na.omit(y))
na.omit(y) * 2
x <- lapply(by_state, function(x) class(x))
x
x <- lapply(by_state, function(x) {x[order(x[,1]),]})
x
x <- lapply(by_state, function(x) {x[order(x[,3]),]})
x
x <- lapply(by_state, function(x) {x[order(x[,3], x[,1]),]})
x
x <- lapply(by_state, function(x) {x[order(x[,3], x[,1]),]})
x <- lapply(by_state, function(x) {x[order(x[,3], x[,1], na.last = NA),]})
x
x <- lapply(by_state, function(x) {x[order(x[,3], x[,1], na.last = NA),]})
x
x
lapply(x, class)
by_state <- lapply(by_state, function(x) {x[order(x[,3], x[,1], na.last = NA),]})
by_state
outcomes <- read.csv("~/Workspace/coursera/rprog-030/rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",  colClasses = "character")
outcome <- "heart attack"
valid_outcomes <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
rate <- valid_outcomes[outcome]
outcomes <- outcomes[, c(2, 7, rate)]
outcomes[, 3] <- as.numeric(outcomes[, 3])
by_state <- lapply(split(outcomes, outcomes[, 2]), function(x) {x[order(x[,3], x[,1], na.last = NA),]})
by_state
outcomes <- read.csv("~/Workspace/coursera/rprog-030/rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",  colClasses = "character")
outcomes <- outcomes[, c("hospital" = 2, "state" = 7, "rate" = rate)]
outcomes
colnames(outcomes)
outcomes <- read.csv("~/Workspace/coursera/rprog-030/rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv",  colClasses = "character")
outcome <- "heart attack"
valid_outcomes <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
rate <- valid_outcomes[outcome]
outcomes <- outcomes[, c(2, 7, rate)]
colnames(outcomes) <- c("hospital", "state", "rate")
outcomes[, 3] <- as.numeric(outcomes[, 3])
by_state <- lapply(split(outcomes, outcomes[, 2]), function(x) {x[order(x[,3], x[,1], na.last = NA),]})
by_state
by_state[1,]
by_state[[1]]
by_state[[1]][1]
by_state[[2]][1]
by_state[[1]][1]
by_state[[1]][1,]
lapply(by_state, function(x) { print(x[1,]) })
y <- lapply(by_state, function(x) { print(x[1,]) })
y <- lapply(by_state, function(x) { rbind(x[1,]) })
y
y <- tapply(by_state, function(x) { rbind(x[1,]) })
y <- lapply(by_state, function(x) { rbind(x[1,]) }, simplify2array = TRUE)
y <- lapply(by_state, function(x) { rbind(x[1,]) })
y
z <- lapply(y,rbind)
z
class(z)
?merge
?union
by_state
sapply(by_state, x[,1])
sapply(by_state, x[1])
sapply(by_state, function(x){ x[,1] })
sapply(by_state, function(x){ x[1,] })
y <- sapply(by_state, function(x){ x[1,] })
class(y)
y
as.data.frame(y)
z <- as.data.frame(y)
z
class(z)
y <- lapply(by_state, function(x) { x[1,] })
y
z <- as.data.frame(y)
z
class(z)
by_state[1,]
z
colnames(z)
y <- as.data.frame(sapply(by_state, function(x) { x[1, ] }))
class(y)
colnames(y)
y
cameraData <- read.table("~/Workspace/coursera/getdata-031/data/cameras.csv")
head(cameraData)
cameraData <- read.table("~/Workspace/coursera/getdata-031/data/cameras.csv", sep = ",", header = TRUE)
head(cameraData)
getwd()
getUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file(getUrl, destfile = "~/Workspace/coursera/getdata-031/data/", method = "curl")
download.file(getUrl, destfile = "~/Workspace/coursera/getdata-031/data/cameras.xlsx", method = "curl")
dateDownloaded <- date()
library(xlsx)
library("xlsx")
library(xlsx)
library(XLConnect)
library("XLConnect")
library("XL Connect")
library(XML)
library("XML")
library('XML')
library(XML)
install.packages(XML)
install.packages("XML")
library(XML)
install.packages("XLSX")
install.packages('xlsx')
library(xlsx)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
xmlSApply(rootNode, xmlValue)
/node
xpathSApply(rootNode, "//name", xmlValue)
xpathSApply(rootNode, "//price", xmlValue)
fileUrl = "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileUrl, useInternal = TRUE)
scores <- xpathSApply(doc, "//li[@class='score']", xmlValue)
teams <- xpathSApply(doc, "//li[@class='team-name']", xmlValue)
scores
scores
install.packages('jsonlite')
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsonData$owner)
jsonData$owner$login
myjson <- toJSON(iris, pretty=TRUE)
cat(myjson)
iris2 <- fromJSON(myjson)
head(iris2)
library(data.table)
install.packages('data.table')
library(data.table)
DT <- data.table(x=rep(c('a','b','c')), each=100, y=norm(300))
DT <- data.table(x=rep(c('a','b','c')), each=100, y=rnorm(300))
setkey(DT, x)
DT['a']
getwd()
q1 <- download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "~/Workspace/coursera/getdata-031/quiz/", method = "curl")
q1 <- download.file(url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "~/Workspace/coursera/getdata-031/quiz/IdahoHousing.csv", method = "curl")
q1data <- read.csv("~/Workspace/coursera/getdata-031/quiz/IdahoHousing.csv")
head(q1data)
q1data$VAL
length(q1data$VAL[q1data$VAL == 24])
q1data$VAL[q1data$VAL == 24]
q1data$VAL[q1data$VAL == 24 & !is.na(q1data$VAL)]
length(q1data$VAL[q1data$VAL == 24 & !is.na(q1data$VAL)])
q1data$FES
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
dat <- read.xlsx(fileUrl, rowIndex = 18:23, colIndex = 7:15)
download.file(fileUrl, destfile = "~/Workspace/coursera/getdata-031/quiz/NatGasAcqProg.xlsx", method = "curl")
dat <- read.xlsx("~/Workspace/coursera/getdata-031/quiz/NatGasAcqProg.xlsx", rowIndex = 18:23, colIndex = 7:15)
dat <- read.xlsx("~/Workspace/coursera/getdata-031/quiz/NatGasAcqProg.xlsx", rowIndex = 18:23, colIndex = 7:15, sheetIndex = 1)
head(dat)
sum(dat$Zip*dat$Ext,na.rm=T)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
download.file(fileUrl, destfile = "~/Workspace/coursera/getdata-031/quiz/BalRest.xml", method = "curl")
doc <- xmlTreeParse("~/Workspace/coursera/getdata-031/quiz/BalRest.xml", useInternal = TRUE)
doc
rootNode <- xmlRoot(doc)
xmlName(rootNode)
xpathSApply(rootNode, "//zipcode", xmlValue)
xpathSApply(rootNode, "//[@zipcode=21231]", xmlValue)
xpathSApply(rootNode, "//name[@zipcode=21231]", xmlValue)
xpathSApply(rootNode, "//name[@zipcode='21231']", xmlValue)
xpathSApply(rootNode, "//zipcode", xmlValue)
s <- xpathSApply(rootNode, "//zipcode", xmlValue)
s
length(s)
length(s[s == 21231])
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile = "~/Workspace/coursera/getdata-031/quiz/Idaho2.csv", method = "curl")
DT <- fread("~/Workspace/coursera/getdata-031/quiz/Idaho2.csv", ",")
head(DT)
DT[, mean(pwgtp15), by=SEX]
file <- "~/Workspace/coursera/exdata-031/household_power_consumption.txt"
dat <- read.table(file, header = TRUE, sep = ";", na.strings = "?")
dat$Date <- as.Date(dat$Date)
dat$Date[1]
?as.Date
file <- "~/Workspace/coursera/exdata-031/household_power_consumption.txt"
dat <- read.table(file, header = TRUE, sep = ";", na.strings = "?")
head(dat)
my_time <- "17:24:00"
my_time
my_string <- "17:24:00"
?"strptime"
my_time <- strptime(my_string, format = "%H:%M:%S")
my_time
file <- "~/Workspace/coursera/exdata-031/household_power_consumption.txt"
df <- read.table(file, header = TRUE, sep = ";", na.strings = "?")
head(df)
paste(df$Date[1], df$Time[1], sep = " ")
my_string <- paste(df$Date[1], df$Time[1], sep = " ")
my_string
?strptime
my_date <- strptime(my_string, format = "%d/%m/%Y %H:%M:%S")
my_date
?cbind
datetime <- paste(df$Date, df$Time, sep = " ")
datetime <- strptime(datetime, format = "%d/%m/%Y %H:%M:%S")
head(datetime)
cbind(df, datetime)
head(df)
head(df)
df$datetime <- datetime
head(df)
tail(df)
df$Date <- as.Date(df$Date)
file <- "~/Workspace/coursera/exdata-031/household_power_consumption.txt"
dat <- read.table(file, header = TRUE, sep = ";", na.strings = "?")
datetime <- paste(df$Date, df$Time, sep = " ")
file <- '~/Workspace/coursera/exdata-031/household_power_consumption.txt'
file <- "~/Workspace/coursera/exdata-031/household_power_consumption.txt"
dat <- read.table(file, header = TRUE, sep = ";", na.strings = "?")
dat$Date <- as.Date(dat$Date)
Date_time <- paste(dat$Date, dat$Time, sep = " ")
head(Date_time)
?as.Date
head(dat)
setwd("~/Workspace/coursera/exdata-031/ExData_Plotting1/")
source("plot3.R")
head(subs)
plot(subs$Date_time, subs$Sub_metering_1)
plot(subs$Date_time, subs$Sub_metering_1, type = "l")
?plot
plot(subs$Date_time, subs$Sub_metering_1, type = "l")
title("title")
plot(subs$Date_time, c(subs$Sub_metering_1, subs$Sub_metering_2, subs$Sub_metering_3), type = "l")
plot(c(subs$Date_time), c(subs$Sub_metering_1, subs$Sub_metering_2, subs$Sub_metering_3), type = "l")
plot(c(subs$Date_time, subs$Date_time, subs$Date_time), c(subs$Sub_metering_1, subs$Sub_metering_2, subs$Sub_metering_3), type = "l")
?with
plot(subs$Date_time, subs$Sub_metering_1, type = "l")
?line
?lines
plot(subs$Date_time, subs$Sub_metering_1, type = "l")
lines(subs$Sub_metering_2)
lines(subs$Date_time ,subs$Sub_metering_2)
lines(subs$Date_time, subs$Sub_metering_3)
lines(subs$Date_time, subs$Sub_metering_3, col("red"))
lines(subs$Date_time, subs$Sub_metering_3, col = "red")
